{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useEventListener } from './useEventListener';\nexport function useFocus(elementRef) {\n  _s();\n\n  const [focus, setFocus] = useState(false);\n\n  const handleOnFocus = () => setFocus(true);\n\n  const handleOnBlur = () => setFocus(false);\n\n  useEventListener('focus', handleOnFocus, elementRef);\n  useEventListener('blur', handleOnBlur, elementRef);\n  return focus;\n}\n\n_s(useFocus, \"ssdqgle5SmCS4fRCx4RzpCg2L0w=\", false, function () {\n  return [useEventListener, useEventListener];\n});","map":{"version":3,"names":["useState","useEventListener","useFocus","elementRef","focus","setFocus","handleOnFocus","handleOnBlur"],"sources":["/home/user/Documents/coding/projects/todofeito-app/src/hooks/useFocus.ts"],"sourcesContent":["import { RefObject, useState } from 'react';\nimport { useEventListener } from './useEventListener';\n\nexport function useFocus<T extends HTMLElement>(\n  elementRef: RefObject<T>\n): boolean {\n  const [focus, setFocus] = useState<boolean>(false);\n\n  const handleOnFocus = () => setFocus(true);\n  const handleOnBlur = () => setFocus(false);\n\n  useEventListener('focus', handleOnFocus, elementRef);\n  useEventListener('blur', handleOnBlur, elementRef);\n\n  return focus;\n}\n"],"mappings":";;AAAA,SAAoBA,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAO,SAASC,QAAT,CACLC,UADK,EAEI;EAAA;;EACT,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAU,KAAV,CAAlC;;EAEA,MAAMM,aAAa,GAAG,MAAMD,QAAQ,CAAC,IAAD,CAApC;;EACA,MAAME,YAAY,GAAG,MAAMF,QAAQ,CAAC,KAAD,CAAnC;;EAEAJ,gBAAgB,CAAC,OAAD,EAAUK,aAAV,EAAyBH,UAAzB,CAAhB;EACAF,gBAAgB,CAAC,MAAD,EAASM,YAAT,EAAuBJ,UAAvB,CAAhB;EAEA,OAAOC,KAAP;AACD;;GAZeF,Q;UAQdD,gB,EACAA,gB"},"metadata":{},"sourceType":"module"}
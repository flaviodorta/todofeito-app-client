{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useLayoutEffect, useState } from 'react';\nexport function useDimensions() {\n  _s();\n\n  const [dimensions, setDimensions] = useState({});\n  const [ref, setRef] = useState(null);\n  const handleDimensions = useCallback(() => {\n    if (ref) setDimensions(ref.getBoundingClientRect());\n  }, []);\n  useLayoutEffect(() => {\n    handleDimensions();\n  }, []);\n  return [setRef, dimensions];\n}\n\n_s(useDimensions, \"/GZMVIK3PDiF0eEvh03rVftNqhg=\");","map":{"version":3,"names":["useCallback","useLayoutEffect","useState","useDimensions","dimensions","setDimensions","ref","setRef","handleDimensions","getBoundingClientRect"],"sources":["/home/user/Documents/coding/projects/todofeito-app/src/hooks/useDimensions.ts"],"sourcesContent":["import { MutableRefObject, useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nexport function useDimensions<T extends HTMLElement>(): [\n  setRef: (node: T | null) => void,\n  dimensions: DOMRect | {}\n] {\n  const [dimensions, setDimensions] = useState<DOMRect | {}>({});\n  const [ref, setRef] = useState<T | null>(null);\n\n  const handleDimensions = useCallback(() => {\n    if (ref) setDimensions(ref.getBoundingClientRect());\n  }, []);\n\n  useLayoutEffect(() => {\n    handleDimensions();\n  }, []);\n\n  return [setRef, dimensions];\n}\n"],"mappings":";;AAAA,SAA2BA,WAA3B,EAAwCC,eAAxC,EAAiEC,QAAjE,QAAiF,OAAjF;AAEA,OAAO,SAASC,aAAT,GAGL;EAAA;;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAe,EAAf,CAA5C;EACA,MAAM,CAACI,GAAD,EAAMC,MAAN,IAAgBL,QAAQ,CAAW,IAAX,CAA9B;EAEA,MAAMM,gBAAgB,GAAGR,WAAW,CAAC,MAAM;IACzC,IAAIM,GAAJ,EAASD,aAAa,CAACC,GAAG,CAACG,qBAAJ,EAAD,CAAb;EACV,CAFmC,EAEjC,EAFiC,CAApC;EAIAR,eAAe,CAAC,MAAM;IACpBO,gBAAgB;EACjB,CAFc,EAEZ,EAFY,CAAf;EAIA,OAAO,CAACD,MAAD,EAASH,UAAT,CAAP;AACD;;GAhBeD,a"},"metadata":{},"sourceType":"module"}
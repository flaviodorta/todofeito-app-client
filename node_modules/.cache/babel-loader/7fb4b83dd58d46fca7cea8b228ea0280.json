{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/coding/projects/todofeito-app/src/pages/base-page/BasePage.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { useLayoutEffect, useRef, useState } from 'react';\nimport { Navbar } from '../../components/layout/Navbar/Navbar.component';\nimport { Sidebar } from '../../components/layout/Sidebar/Sidebar.component';\nimport { Content } from './BasePage.styled';\nimport { useWindowSize } from '../../hooks/useWindowSize';\nimport { breakpoints } from '../../styles/theme/theme';\nimport { useEventListener } from '../../hooks/useEventListener';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function BasePage(props) {\n  _s();\n\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n\n  const toggleSidebar = () => setIsSidebarOpen(state => !state);\n\n  const windowSizeWidth = useWindowSize().width;\n  const oldWindowWidthRef = useRef(undefined);\n  const breakpointMd = parseInt(breakpoints.md, 10);\n  useLayoutEffect(() => {\n    return () => {\n      console.log(oldWindowWidthRef.current, windowSizeWidth);\n      oldWindowWidthRef.current = windowSizeWidth;\n    };\n  });\n  useEventListener('resize', () => {\n    if (windowSizeWidth && oldWindowWidthRef.current) {\n      if (isSidebarOpen && windowSizeWidth < breakpointMd && oldWindowWidthRef.current > breakpointMd) {\n        setTimeout(toggleSidebar, 200);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      toggleSidebar: toggleSidebar,\n      isSidebarOpen: isSidebarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      toggleSidebar: toggleSidebar,\n      isSidebarOpen: isSidebarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      isSidebarOpen: isSidebarOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(BasePage, \"L1yLDazDJYkQKiH5VuxeghCwBVk=\", false, function () {\n  return [useWindowSize, useEventListener];\n});\n\n_c = BasePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasePage\");","map":{"version":3,"names":["useLayoutEffect","useRef","useState","Navbar","Sidebar","Content","useWindowSize","breakpoints","useEventListener","BasePage","props","isSidebarOpen","setIsSidebarOpen","toggleSidebar","state","windowSizeWidth","width","oldWindowWidthRef","undefined","breakpointMd","parseInt","md","console","log","current","setTimeout"],"sources":["/home/user/Documents/coding/projects/todofeito-app/src/pages/base-page/BasePage.component.tsx"],"sourcesContent":["import { useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { BasePageProps } from './BasePage.types';\n\nimport { Navbar } from '../../components/layout/Navbar/Navbar.component';\nimport { Sidebar } from '../../components/layout/Sidebar/Sidebar.component';\nimport { Content } from './BasePage.styled';\nimport { useWindowSize } from '../../hooks/useWindowSize';\nimport { breakpoints } from '../../styles/theme/theme';\nimport { useEventListener } from '../../hooks/useEventListener';\n\nexport function BasePage(props: BasePageProps): JSX.Element {\n  const [isSidebarOpen, setIsSidebarOpen] = useState<boolean>(true);\n  const toggleSidebar = () => setIsSidebarOpen((state) => !state);\n\n  const windowSizeWidth = useWindowSize().width;\n  const oldWindowWidthRef = useRef<number | undefined>(undefined);\n  const breakpointMd = parseInt(breakpoints.md, 10);\n\n  useLayoutEffect(() => {\n    return () => {\n      console.log(oldWindowWidthRef.current, windowSizeWidth);\n      oldWindowWidthRef.current = windowSizeWidth;\n    };\n  });\n\n  useEventListener('resize', () => {\n    if (windowSizeWidth && oldWindowWidthRef.current) {\n      if (\n        isSidebarOpen &&\n        windowSizeWidth < breakpointMd &&\n        oldWindowWidthRef.current > breakpointMd\n      ) {\n        setTimeout(toggleSidebar, 200);\n      }\n    }\n  });\n\n  return (\n    <>\n      <Navbar toggleSidebar={toggleSidebar} isSidebarOpen={isSidebarOpen} />\n      <Sidebar toggleSidebar={toggleSidebar} isSidebarOpen={isSidebarOpen} />\n      <Content isSidebarOpen={isSidebarOpen}></Content>\n    </>\n  );\n}\n"],"mappings":";;;AAAA,SAAoBA,eAApB,EAA8CC,MAA9C,EAAsDC,QAAtD,QAAsE,OAAtE;AAGA,SAASC,MAAT,QAAuB,iDAAvB;AACA,SAASC,OAAT,QAAwB,mDAAxB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAqD;EAAA;;EAC1D,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAU,IAAV,CAAlD;;EACA,MAAMW,aAAa,GAAG,MAAMD,gBAAgB,CAAEE,KAAD,IAAW,CAACA,KAAb,CAA5C;;EAEA,MAAMC,eAAe,GAAGT,aAAa,GAAGU,KAAxC;EACA,MAAMC,iBAAiB,GAAGhB,MAAM,CAAqBiB,SAArB,CAAhC;EACA,MAAMC,YAAY,GAAGC,QAAQ,CAACb,WAAW,CAACc,EAAb,EAAiB,EAAjB,CAA7B;EAEArB,eAAe,CAAC,MAAM;IACpB,OAAO,MAAM;MACXsB,OAAO,CAACC,GAAR,CAAYN,iBAAiB,CAACO,OAA9B,EAAuCT,eAAvC;MACAE,iBAAiB,CAACO,OAAlB,GAA4BT,eAA5B;IACD,CAHD;EAID,CALc,CAAf;EAOAP,gBAAgB,CAAC,QAAD,EAAW,MAAM;IAC/B,IAAIO,eAAe,IAAIE,iBAAiB,CAACO,OAAzC,EAAkD;MAChD,IACEb,aAAa,IACbI,eAAe,GAAGI,YADlB,IAEAF,iBAAiB,CAACO,OAAlB,GAA4BL,YAH9B,EAIE;QACAM,UAAU,CAACZ,aAAD,EAAgB,GAAhB,CAAV;MACD;IACF;EACF,CAVe,CAAhB;EAYA,oBACE;IAAA,wBACE,QAAC,MAAD;MAAQ,aAAa,EAAEA,aAAvB;MAAsC,aAAa,EAAEF;IAArD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,OAAD;MAAS,aAAa,EAAEE,aAAxB;MAAuC,aAAa,EAAEF;IAAtD;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,OAAD;MAAS,aAAa,EAAEA;IAAxB;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA,gBADF;AAOD;;GAlCeF,Q;UAIUH,a,EAWxBE,gB;;;KAfcC,Q"},"metadata":{},"sourceType":"module"}
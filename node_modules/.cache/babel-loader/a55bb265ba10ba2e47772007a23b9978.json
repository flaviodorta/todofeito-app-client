{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useLayoutEffect, useRef } from 'react';\nexport function useEventListener(eventName, handler, element, options) {\n  _s();\n\n  const savedHandler = useRef(handler);\n  useLayoutEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    const targetElement = (element === null || element === void 0 ? void 0 : element.current) || window;\n    if (!(targetElement && targetElement.addEventListener)) return;\n\n    const eventListener = event => savedHandler.current(event);\n\n    targetElement.addEventListener(eventName, eventListener, options);\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element, options]);\n}\n\n_s(useEventListener, \"q9jWD1O9izCDGAb8e40lLGTi3v4=\");","map":{"version":3,"names":["useEffect","useLayoutEffect","useRef","useEventListener","eventName","handler","element","options","savedHandler","current","targetElement","window","addEventListener","eventListener","event","removeEventListener"],"sources":["/home/user/Documents/coding/projects/todofeito-app/src/hooks/useEventListener.ts"],"sourcesContent":["import { RefObject, useEffect, useLayoutEffect, useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\nexport function useEventListener<K extends keyof WindowEventMap>(\n  eventName: K,\n  handler: (event: WindowEventMap[K]) => void,\n  element?: undefined,\n  options?: boolean | AddEventListenerOptions\n): void;\n\nexport function useEventListener<\n  K extends keyof HTMLElementEventMap,\n  T extends HTMLElement = HTMLDivElement\n>(\n  eventName: K,\n  handler: (event: HTMLElementEventMap[K]) => void,\n  element: RefObject<T>,\n  options?: boolean | AddEventListenerOptions\n): void;\n\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  eventName: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  element: RefObject<Document>,\n  options?: boolean | AddEventListenerOptions\n): void;\n\nexport function useEventListener<\n  KW extends keyof WindowEventMap,\n  KH extends keyof HTMLElementEventMap,\n  T extends HTMLElement | void = void\n>(\n  eventName: KH | KW,\n  handler: (event: WindowEventMap[KW] | HTMLElementEventMap[KH] | Event) => void,\n  element?: React.RefObject<T>,\n  options?: boolean | AddEventListenerOptions\n) {\n  const savedHandler = useRef(handler);\n\n  useLayoutEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const targetElement: T | Window = element?.current || window;\n\n    if (!(targetElement && targetElement.addEventListener)) return;\n\n    const eventListener: typeof handler = (event) => savedHandler.current(event);\n\n    targetElement.addEventListener(eventName, eventListener, options);\n\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element, options]);\n}\n"],"mappings":";;AAAA,SAAoBA,SAApB,EAA+BC,eAA/B,EAAgDC,MAAhD,QAA8D,OAA9D;AA2BA,OAAO,SAASC,gBAAT,CAKLC,SALK,EAMLC,OANK,EAOLC,OAPK,EAQLC,OARK,EASL;EAAA;;EACA,MAAMC,YAAY,GAAGN,MAAM,CAACG,OAAD,CAA3B;EAEAJ,eAAe,CAAC,MAAM;IACpBO,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;EACD,CAFc,EAEZ,CAACA,OAAD,CAFY,CAAf;EAIAL,SAAS,CAAC,MAAM;IACd,MAAMU,aAAyB,GAAG,CAAAJ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEG,OAAT,KAAoBE,MAAtD;IAEA,IAAI,EAAED,aAAa,IAAIA,aAAa,CAACE,gBAAjC,CAAJ,EAAwD;;IAExD,MAAMC,aAA6B,GAAIC,KAAD,IAAWN,YAAY,CAACC,OAAb,CAAqBK,KAArB,CAAjD;;IAEAJ,aAAa,CAACE,gBAAd,CAA+BR,SAA/B,EAA0CS,aAA1C,EAAyDN,OAAzD;IAEA,OAAO,MAAM;MACXG,aAAa,CAACK,mBAAd,CAAkCX,SAAlC,EAA6CS,aAA7C;IACD,CAFD;EAGD,CAZQ,EAYN,CAACT,SAAD,EAAYE,OAAZ,EAAqBC,OAArB,CAZM,CAAT;AAaD;;GA7BeJ,gB"},"metadata":{},"sourceType":"module"}
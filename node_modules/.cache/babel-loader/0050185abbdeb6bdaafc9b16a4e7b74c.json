{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nexport function useDimensions() {\n  _s();\n\n  const [dimensions, setDimensions] = useState({});\n  const [ref, setRef] = useState(null);\n  console.log(ref, dimensions);\n  const handleDimensions = useCallback(() => {\n    if (ref) setDimensions(ref.getBoundingClientRect());\n  }, [ref]);\n  return [setRef, dimensions];\n}\n\n_s(useDimensions, \"AiaHtz91tu01u43u2czmkKC1iBw=\");","map":{"version":3,"names":["useCallback","useState","useDimensions","dimensions","setDimensions","ref","setRef","console","log","handleDimensions","getBoundingClientRect"],"sources":["/home/user/Documents/coding/projects/todofeito-app/src/hooks/useDimensions.ts"],"sourcesContent":["import { MutableRefObject, useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nexport function useDimensions<T extends HTMLElement>(): [\n  setRef: (node: T | null) => void,\n  dimensions: DOMRect | {}\n] {\n  const [dimensions, setDimensions] = useState<DOMRect | {}>({});\n  const [ref, setRef] = useState<T | null>(null);\n\n  console.log(ref, dimensions);\n\n  const handleDimensions = useCallback(() => {\n    if (ref) setDimensions(ref.getBoundingClientRect());\n  }, [ref]);\n\n  return [setRef, dimensions];\n}\n"],"mappings":";;AAAA,SAA2BA,WAA3B,EAAiEC,QAAjE,QAAiF,OAAjF;AAEA,OAAO,SAASC,aAAT,GAGL;EAAA;;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BH,QAAQ,CAAe,EAAf,CAA5C;EACA,MAAM,CAACI,GAAD,EAAMC,MAAN,IAAgBL,QAAQ,CAAW,IAAX,CAA9B;EAEAM,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBF,UAAjB;EAEA,MAAMM,gBAAgB,GAAGT,WAAW,CAAC,MAAM;IACzC,IAAIK,GAAJ,EAASD,aAAa,CAACC,GAAG,CAACK,qBAAJ,EAAD,CAAb;EACV,CAFmC,EAEjC,CAACL,GAAD,CAFiC,CAApC;EAIA,OAAO,CAACC,MAAD,EAASH,UAAT,CAAP;AACD;;GAdeD,a"},"metadata":{},"sourceType":"module"}
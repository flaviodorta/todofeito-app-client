{"ast":null,"code":"import _slicedToArray from \"/home/user/Documents/coding/projects/todofeito-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nexport function usePersistedState(key, initialState) {\n  var _useState = useState(function () {\n    var storageValue = localStorage.getItem(key);\n    return storageValue ? JSON.parse(storageValue) : initialState;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  useEffect(function () {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n}","map":{"version":3,"names":["useEffect","useState","usePersistedState","key","initialState","storageValue","localStorage","getItem","JSON","parse","state","setState","setItem","stringify"],"sources":["/home/user/Documents/coding/projects/todofeito-app/client/src/hooks/usePersistedState.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\ntype Return<T> = [T, Dispatch<SetStateAction<T>>];\n\nexport function usePersistedState<T>(key: string, initialState: T): Return<T> {\n  const [state, setState] = useState<T>(() => {\n    const storageValue = localStorage.getItem(key);\n\n    return storageValue ? JSON.parse(storageValue) : initialState;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n"],"mappings":";AAAA,SAAmCA,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AAIA,OAAO,SAASC,iBAAT,CAA8BC,GAA9B,EAA2CC,YAA3C,EAAuE;EAAA,gBAClDH,QAAQ,CAAI,YAAM;IAC1C,IAAMI,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBJ,GAArB,CAArB;IAEA,OAAOE,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAH,GAA8BD,YAAjD;EACD,CAJiC,CAD0C;EAAA;EAAA,IACrEM,KADqE;EAAA,IAC9DC,QAD8D;;EAO5EX,SAAS,CAAC,YAAM;IACdM,YAAY,CAACM,OAAb,CAAqBT,GAArB,EAA0BK,IAAI,CAACK,SAAL,CAAeH,KAAf,CAA1B;EACD,CAFQ,EAEN,CAACP,GAAD,EAAMO,KAAN,CAFM,CAAT;EAIA,OAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/coding/projects/todofeito-app/src/context/ThemeAppContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, createContext } from 'react';\nimport { usePersistedState } from '../hooks/usePersistedState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValue = {\n  mode: 'light',\n  toggleMode: () => {}\n};\nconst ThemeModeContext = /*#__PURE__*/createContext(initialValue);\nexport const useThemeMode = () => {\n  _s();\n\n  return useContext(ThemeModeContext);\n};\n\n_s(useThemeMode, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ThemeModeProvider(props) {\n  _s2();\n\n  const [mode, setMode] = usePersistedState('mode', 'light');\n\n  const toggleMode = () => {\n    console.log('click');\n    setMode(mode === 'light' ? 'dark' : 'light');\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeModeContext.Provider, {\n    value: {\n      mode,\n      toggleMode\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ThemeModeProvider, \"US8thEVFxZapm2Sr5pGfWHV0ypY=\", false, function () {\n  return [usePersistedState];\n});\n\n_c = ThemeModeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeModeProvider\");","map":{"version":3,"names":["useContext","createContext","usePersistedState","initialValue","mode","toggleMode","ThemeModeContext","useThemeMode","ThemeModeProvider","props","setMode","console","log","children"],"sources":["/home/user/Documents/coding/projects/todofeito-app/src/context/ThemeAppContext.tsx"],"sourcesContent":["import { useContext, createContext } from 'react';\nimport { usePersistedState } from '../hooks/usePersistedState';\nimport { ThemeModeContextType, ThemeModeProviderProps } from '../types/types';\n\nconst initialValue = {\n  mode: 'light',\n  toggleMode: () => {}\n}\n\nconst ThemeModeContext = createContext<ThemeModeContextType>(initialValue);\n\nexport const useThemeMode = () => useContext(ThemeModeContext);\n\nexport function ThemeModeProvider(props : ThemeModeProviderProps): JSX.Element {\n  const [mode, setMode] = usePersistedState<string>('mode', 'light');\n\n  const toggleMode = () => {\n    console.log('click')\n    setMode(mode === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeModeContext.Provider value={{mode, toggleMode}}>{props.children}</ThemeModeContext.Provider>\n  )\n}\n"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,aAArB,QAA0C,OAA1C;AACA,SAASC,iBAAT,QAAkC,4BAAlC;;AAGA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,OADa;EAEnBC,UAAU,EAAE,MAAM,CAAE;AAFD,CAArB;AAKA,MAAMC,gBAAgB,gBAAGL,aAAa,CAAuBE,YAAvB,CAAtC;AAEA,OAAO,MAAMI,YAAY,GAAG;EAAA;;EAAA,OAAMP,UAAU,CAACM,gBAAD,CAAhB;AAAA,CAArB;;GAAMC,Y;;AAEb,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAwE;EAAA;;EAC7E,MAAM,CAACL,IAAD,EAAOM,OAAP,IAAkBR,iBAAiB,CAAS,MAAT,EAAiB,OAAjB,CAAzC;;EAEA,MAAMG,UAAU,GAAG,MAAM;IACvBM,OAAO,CAACC,GAAR,CAAY,OAAZ;IACAF,OAAO,CAACN,IAAI,KAAK,OAAT,GAAmB,MAAnB,GAA4B,OAA7B,CAAP;EACD,CAHD;;EAKA,oBACE,QAAC,gBAAD,CAAkB,QAAlB;IAA2B,KAAK,EAAE;MAACA,IAAD;MAAOC;IAAP,CAAlC;IAAA,UAAuDI,KAAK,CAACI;EAA7D;IAAA;IAAA;IAAA;EAAA,QADF;AAGD;;IAXeL,iB;UACUN,iB;;;KADVM,iB"},"metadata":{},"sourceType":"module"}